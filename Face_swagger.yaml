openapi: 3.0.0
info:
  title: Face Open API
  description: >
    ### API Version History

    Version | Description | Date | By

    ----------------|-------------|-------------|-------------------

    0.0.1 | Initail Document - Face API 1.0.2 | 2020-05-29 | Chayakorn Arjariya


    ### Service Description

    Service Code | Service Desc

    -------------|-----------------------------------------------------------------------------------------

    001-01 | Detect human faces in an image, return faceUid

    001-02 | Return face quality result

    001-03 | Compare whether two faces belong to a same person with faceIds,
    return comparison result

    001-04 | Compare whether two faces belong to a same person with images,
    return comparison result

    001-05 | Face Identification with face set.

    002-01 | Create an empty face set with user-specified name, an optional
    userData.

    002-02 | Delete a specified face set.

    002-03 | Update information of a face set, including name and userData.

    002-04 | Retrieve a face set’s facesetUid, name, userData and faces in the
    face set.

    002-05 | List face lists’ facesetUid, name and userData.

    003-01 | Add a face to a specified face set.

    003-02 | Delete a specified faceUid in face set.

    003-03 | List face lists’ in faceset.

    003-04 | Update userData of face in faceset.



    ### Error Description

    Error Code | Error Desc | Service

    -------------|-------------------------------|---------------------------------------------------------------------------

    EC0001 | 'partnerId' cannot be null | ALL

    EC0002 | 'partnerSecret' cannot be null | ALL

    EC0003 | 'requestId' cannot be null | ALL

    EC0004 | 'requestId' length must be = 32 | ALL

    EC0005 | 'requestDt' cannot be null | ALL

    EC0006 | 'requestDt' invalid format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ' | ALL

    EC0007 | 'pageable' cannot be null | ALL

    EC0008 | 'pageable' invalid format | ALL

    EC0009 | 'pageNumber' cannot be null | ALL

    EC0010 | 'pageSize' cannot be null | ALL

    ED0001 | 'json' cannot be null | 001-01

    ED0002 | 'json' invalid format | 001-01

    ED0003 | 'image' cannot be null | 001-01

    ED0004 | 'image' type not support | 001-01

    ED0005 | 'faceId' cannot be null | 001-02, 003-01, 003-02

    ED0006 | 'faceId_01' cannot be null | 001-03

    ED0007 | 'faceId_02' cannot be null | 001-03

    ED0008 | 'name' cannot be null | 002-01, 002-03

    ED0009 | 'userData' invalid max size | 002-01, 003-01, 003-02

    ED0010 | 'faceSetId' cannot be null | 001-05, 002-02, 002-03, 002-04,
    003-01, 003-02, 003-03, 003-04

    ED0011 | 'faceSet' cannot be null | 002-03

    ED0012 | 'faceSet' invalid format | 002-03

    ED0013 | 'image_01' cannot be null | 001-04

    ED0014 | 'image_02' cannot be null | 001-04

    ED0015 | 'faceSetId' not found | 001-05

    ED0016 | 'name' Invalid format | 002-01

    ED0017 | 'Face Set' is expired. | 001-05, 002-03, 003-01

      
  version: 1.0.0
servers:
  - url: 'http://api.example.com/v1'
    description: 'Optional server description, e.g. Main (production) server'
  - url: 'http://staging-api.example.com'
    description: 'Optional server description, e.g. Internal staging server for testing'
security:
- oAuth2_client_credential: []
tags:
  - name: Partner-Face-API
    description: Partner-Face-API
  - name: Partner-FaceSet-Definition
    description: Partner-FaceSet-Definition
  - name: Partner-FaceSet-Manipulation
    description: Partner-FaceSet-Manipulation
paths:
  /face/detect:
    post:
      summary: Face-API-Detect (001-01)
      description: 'Detect human faces in an image, return faceUid'
      tags:
        - Partner-Face-API
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                json:
                  $ref: '#/components/schemas/FaceDetectRequest'
                image:
                  type: string
                  format: binary
              required:
                - json
                - image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceDetectResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /face/quality:
    post:
      summary: Face-API-Quality (001-02)
      description: Return face quality result
      tags:
        - Partner-Face-API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceQualityRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceQualityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /face/faceid-compare:
    post:
      summary: Face-API-Compare (001-03)
      description: >-
        Compare whether two faces belong to a same person, return comparison
        result and percent accuracy
      tags:
        - Partner-Face-API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceCompareRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceCompareResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /face/image-compare:
    post:
      summary: Face-API-Compare (001-04)
      description: >-
        Compare whether two faces belong to a same person, return comparison
        result
      tags:
        - Partner-Face-API
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                json:
                  $ref: '#/components/schemas/FaceCompareImageRequest'
                image_01:
                  type: string
                  format: binary
                image_02:
                  type: string
                  format: binary
              required:
                - json
                - image_01
                - image_02
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceCompareResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /face/identification:
    post:
      summary: Face-API-Identification (001-05)
      description: Face Identification with face-set
      tags:
        - Partner-Face-API
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                json:
                  $ref: '#/components/schemas/FaceIdentificationRequest'
                image:
                  type: string
                  format: binary
              required:
                - json
                - image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceIdentificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-definition/create:
    post:
      summary: FaceSet-API-Create (002-01)
      description: 'Create an empty face set with user-specified name, an optional userData.'
      tags:
        - Partner-FaceSet-Definition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetCreateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetCreateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-definition/delete:
    post:
      summary: FaceSet-API-Delete (002-02)
      description: Delete a specified face set.
      tags:
        - Partner-FaceSet-Definition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetDeleteRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetDeleteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-definition/update:
    post:
      summary: FaceSet-API-Update (002-03)
      description: 'Update information of a face set, including name and userData.'
      tags:
        - Partner-FaceSet-Definition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetUpdateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-definition/get:
    post:
      summary: FaceSet-API-Get (002-04)
      description: 'Retrieve a face set’s facesetUid, name, userData in the face set.'
      tags:
        - Partner-FaceSet-Definition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetGetRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetGetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-definition/list:
    post:
      summary: FaceSet-API-List (002-05)
      description: 'List face lists’ facesetUid, name and userData.'
      tags:
        - Partner-FaceSet-Definition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetGetAllRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetGetAllResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-manipulation/add:
    post:
      summary: FaceSet-Face-API-Add (003-01)
      description: Add a face to a specified face set.
      tags:
        - Partner-FaceSet-Manipulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetFaceAddRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetFaceAddResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-manipulation/delete:
    post:
      summary: FaceSet-Face-API-Delete (003-02)
      description: Delete a specified faceUid in face set.
      tags:
        - Partner-FaceSet-Manipulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetFaceDeleteRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetFaceDeleteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-manipulation/list:
    post:
      summary: FaceSet-Face-API-List (003-03)
      description: 'List face lists’ facesetUid, name and userData .'
      tags:
        - Partner-FaceSet-Manipulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetFaceListFaceRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetFaceListFaceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
  /faceset-manipulation/update:
    post:
      summary: FaceSet-Face-API-Update (003-04)
      description: Update userData of face in face set.
      tags:
        - Partner-FaceSet-Manipulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceSetFaceUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceSetFaceUpdateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: API Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponseFail'
components:
  schemas:
    Error:
      properties:
        errorCode:
          type: string
        errorDesc:
          type: string
      required:
        - errorCode
        - errorDesc
    UserData:
      properties:
        ref1:
          type: string
        ref2:
          type: string
        ref3:
          type: string
        ref4:
          type: string
        ref5:
          type: string
        ref6:
          type: string
        ref7:
          type: string
        ref8:
          type: string
        ref9:
          type: string
        ref10:
          type: string
    HeaderRequest:
      properties:
        partnerId:
          type: string
          description: >-
            Partner identifier. This ID will be provided to each partner by
            KBank
        partnerSecret:
          type: string
          description: Secret key to identify each partner
        requestId:
          type: string
          description: ID to uniquely define each request from partner
        requestDt:
          type: string
          description: >-
            Request date-time define each request from partner format
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
      required:
        - partnerId
        - partnerSecret
        - requestId
        - requestDt
    HeaderResponse_Success:
      properties:
        partnerId:
          type: string
          description: >-
            Partner identifier. This ID will be provided to each partner by
            KBank
        requestId:
          type: string
          description: ID to uniquely define each request from partner
        requestDt:
          type: string
          description: >-
            Request date-time define each request from partner format
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
        responseId:
          type: string
          description: ID to uniquely define each request from partner
        responsetDt:
          type: string
          description: >-
            Request date-time define each request from partner format
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
        statusCode:
          type: string
          description: 'Transaction process status default ''00'' (00=Success, 10=Fail)'
          enum:
            - '00'
            - '10'
          default: '00'
        errors:
          type: object
          items: {}
          description: field is empty.
      required:
        - partnerId
        - partnerSecret
        - requestId
        - requestDt
        - responsetId
        - responsetDt
        - statusCode
    HeaderResponse_Fail:
      properties:
        partnerId:
          type: string
          description: >-
            Partner identifier. This ID will be provided to each partner by
            KBank
        requestId:
          type: string
          description: ID to uniquely define each request from partner
        requestDt:
          type: string
          description: >-
            Request date-time define each request from partner format
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
        responseId:
          type: string
          description: ID to uniquely define each request from partner
        responsetDt:
          type: string
          description: >-
            Request date-time define each request from partner format
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
        statusCode:
          type: string
          description: 'Transaction process status default ''10'' (00=Success, 10=Fail)'
          enum:
            - '00'
            - '10'
          default: '10'
        error:
          description: Error message form Server API
          $ref: '#/components/schemas/Error'
      required:
        - partnerId
        - partnerSecret
        - requestId
        - requestDt
        - responseId
        - responsetDt
        - statusCode
        - errors
    GenericResponseFail:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Fail'
      required:
        - header
    FaceDetectRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
      required:
        - header
    FaceDetectResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
        faceId:
          type: string
          description: Unique for referent image to detect face.
      required:
        - header
        - faceId
    FaceQualityRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceId:
          type: string
          description: Unique for referent image to detect face.
      required:
        - header
        - faceId
    FaceQualityResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
        faceQuality:
          type: string
      required:
        - header
        - faceQuality
    FaceCompareRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceId_01:
          type: string
          description: Unique for referent face.
        faceId_02:
          type: string
          description: Unique for referent face.
      required:
        - header
        - faceId_01
        - faceId_02
    FaceCompareResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
        samePerson:
          type: boolean
        faceId_id_01:
          type: string
        faceId_id_02:
          type: string
        confidenceLevel:
          type: integer
      required:
        - header
        - samePerson
        - faceId_id_01
        - faceId_id_02
        - confidenceLevel
    FaceCompareImageRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
      required:
        - header
    Face:
      properties:
        faceId:
          type: string
          description: face ID.
        userData:
          $ref: '#/components/schemas/UserData'
          description: User-provided data.
      required:
        - faceId
    FaceSet:
      properties:
        faceSetId:
          type: string
          description: faceset ID.
        name:
          type: string
          description: faceset display name.
        userData:
          $ref: '#/components/schemas/UserData'
          description: User-provided data.
      required:
        - faceSetId
        - name
    Pageable:
      properties:
        pageNumber:
          type: integer
          description: Page Number.
        pageSize:
          type: integer
          description: Page Size (Limit 50 Record per Page).
          maximum: 50
      required:
        - pageNumber
        - pageSize
    PageFaceSetResult:
      properties:
        pageNumber:
          type: integer
          description: Page Number.
        totalPages:
          type: integer
          description: Total page numbers.
        totalElements:
          type: integer
          description: Total elements.
        elements:
          type: array
          items:
            $ref: '#/components/schemas/FaceSet'
          description: Elements in page.
      required:
        - pageNumber
        - totalPages
        - totalElements
    PageFaceSetFaceResult:
      properties:
        pageNumber:
          type: integer
          description: Page Number.
        totalPages:
          type: integer
          description: Total page numbers.
        totalElements:
          type: integer
          description: Total elements.
        elements:
          type: array
          items:
            $ref: '#/components/schemas/Face'
            description: face Object.
          description: Elements in page.
      required:
        - pageNumber
        - totalPages
        - totalElements
    FaceSetCreateRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        name:
          type: string
          description: faceset display name (format XXX-yyyyMMdd).
        description:
          type: string
          description: faceset description.
        userData:
          $ref: '#/components/schemas/UserData'
          description: User-provided data.
        ttlInMilliseconds:
          type: integer
          description: 'If you set ttl_in_milliseconds=0, the Face-Set will never expire.'
      required:
        - header
        - name
    FaceSetCreateResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
        faceSetId:
          type: string
          description: faceset ID.
      required:
        - header
        - faceSetId
    FaceSetDeleteRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceSetId:
          type: string
          description: faceset ID.
      required:
        - header
        - faceSetId
    FaceSetDeleteResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
      required:
        - header
    FaceSetUpdateRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceSet:
          $ref: '#/components/schemas/FaceSet'
      required:
        - header
        - faceSet
    FaceSetUpdateResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
      required:
        - header
    FaceSetGetRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceSetId:
          type: string
          description: faceset ID.
      required:
        - header
        - faceSetId
    FaceSetGetResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
        faceSet:
          $ref: '#/components/schemas/FaceSet'
      required:
        - header
        - faceSet
    FaceSetGetAllRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        pageable:
          $ref: '#/components/schemas/Pageable'
        faceSetStatus:
          type: string
          enum:
            - ACTIVE
            - EXPIRED
            - ALL
          default: ACTIVE
      required:
        - header
        - pageable
    FaceSetGetAllResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
        page:
          $ref: '#/components/schemas/PageFaceSetResult'
      required:
        - header
        - page
    FaceSetFaceAddRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceSetId:
          type: string
          description: faceset ID.
        faceId:
          type: string
          description: face ID.
        userData:
          $ref: '#/components/schemas/UserData'
          description: User-provided data.
      required:
        - header
        - faceSetId
        - faceId
    FaceSetFaceAddResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
      required:
        - header
    FaceSetFaceDeleteRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceSetId:
          type: string
          description: faceset ID.
        faceId:
          type: string
          description: face ID.
      required:
        - header
        - faceSetId
        - faceId
    FaceSetFaceDeleteResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
      required:
        - header
    FaceSetFaceListFaceRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        pageable:
          $ref: '#/components/schemas/Pageable'
        faceSetId:
          type: string
          description: faceset ID.
      required:
        - header
        - pageable
        - faceSetId
    FaceSetFaceListFaceResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
        page:
          $ref: '#/components/schemas/PageFaceSetFaceResult'
      required:
        - header
        - page
    FaceSetFaceUpdateRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceSetId:
          type: string
          description: faceset ID.
        faceId:
          type: string
          description: face ID.
        userData:
          $ref: '#/components/schemas/UserData'
          description: User-provided data.
      required:
        - header
        - faceSetId
        - faceId
    FaceSetFaceUpdateResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
      required:
        - header
    FaceIdentificationRequest:
      properties:
        header:
          $ref: '#/components/schemas/HeaderRequest'
        faceSetId:
          type: string
          description: faceset ID.
      required:
        - header
        - faceSetId
    FaceIdentificationResponse:
      properties:
        header:
          $ref: '#/components/schemas/HeaderResponse_Success'
        elements:
          type: array
          items:
            $ref: '#/components/schemas/Face'
            description: face Object.
          description: Elements in page.
      required:
        - header
  securitySchemes:
    oAuth2_client_credential:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow.s
      flows:
        clientCredentials:
          tokenUrl: https://dev.openapi-nonprod.kasikornbank.com/oauth/token
          scopes:
            All: verify slip
